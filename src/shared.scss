@use "sass:list";
@use "sass:map";
@use "sass:math";

// From bootstrap (https://v5.getbootstrap.com/docs/5.0/customize/color/)
$blue:     #0d6efd !default;
$indigo:   #6610f2 !default;
$purple:   #6f42c1 !default;
$pink:     #d63384 !default;
$red:      #dc3545 !default;
$orange:   #fd7e14 !default;
$yellow:   #ffc107 !default;
$green:    #198754 !default;
$teal:     #20c997 !default;
$cyan:     #0dcaf0 !default;

// From mantine (https://mantine.dev/pages/theming)
$red-mantine:    #ff6b6b !default;
$pink-mantine:   #f06595 !default;
$grape-mantine:  #cc5de8 !default;
$violet-mantine: #845ef7 !default;
$indigo-mantine: #5c7cfa !default;
$blue-mantine:   #339af0 !default;
$cyan-mantine:   #22b8cf !default;
$teal-mantine:   #20c997 !default;
$green-mantine:  #51cf66 !default;
$lime-mantine:   #94d82d !default;
$yellow-mantine: #fcc419 !default;
$orange-mantine: #ff922b !default;

@mixin generate-color-vars($key, $base) {
   $theme-color-interval: 7% !default;  // how different are shades of a color

   @for $variant from 1 through 9 {
      // base color for this variant (1 -> more white, 9 -> more black)
      $c: if($variant < 5,
               mix(white, $base, (10 - 2 * $variant) * $theme-color-interval),
          if($variant == 5,
               $base,
               mix(black, $base, (2 * $variant - 10) * $theme-color-interval)));

      // The foreground color to use on top of this base color. This is
      // computed automatically based on brightness, see
      // https://www.smashingmagazine.com/2020/07/css-techniques-legibility/
      // The actual color comes from the semantic part of the theme, so these
      // rules must be defined on the same element.
      $brightness: red($c) * 0.299 + green($c) * 0.587 + blue($c) * 0.114;
      $fg: if($brightness >= 128,
               var(--fg-for-light-colors),
               var(--fg-for-dark-colors));

      --#{"" + $key}-#{$variant * 100}: #{$c};
      --fg-#{"" + $key}-#{$variant * 100}: #{$fg};

      @for $alpha from 1 through 9 {
         --#{"" + $key}-#{$variant * 100}-#{$alpha * 10}p: #{rgba($c, math.div($alpha, 10))};
      }
   }
}

@mixin numeric-font {
   font-family: "minion pro", "myriad pro", "tahoma";
   font-size-adjust: 0.438;
   font-variant-numeric: lining-nums tabular-nums;
//   font-variant-numeric: oldstyle-nums tabular-nums;
   white-space: nowrap;
}

@mixin set-colors($name) {
   color: var(--#{$name}-fg);
   background: var(--#{$name}-bg);
}

/**
 * From http://santhoshsivan.com/neu.html
 * See also: https://neumorphism.io/#f9f5ff
 * and https://github.com/Idean/Flutter-Neumorphic
 */
@mixin neumorphism(
   $distance: 5px, $direction: "topleft", $hover: true, $margin: true,
) {
   $colors: (
      dark:   [ inherit, #00000080, #3a3a3a60 ],
      // dark2:  [ 1A1B1E #151518, #242529 ],
      light:  [ inherit, #a3b1c680, #ffffff ],
      // light2: [ #DEEAF6, #BECBD8, #F3F9FF ],
      // red:    [ #d12e2e, #b22727, #f03535 ],
      // blue:   [ #55b9f3, #489dcf, #62d5ff ],
      // green:  [ #2ead5b, #27934d, #35c769 ],
      // yellow: [ #eade39, #c7bd30, #ffff42 ],
      // ink:    [ #2d08b5, #220688, #380ae2 ],
      // purple: [ #8d75e6, #7863c4, #a287ff ],
   );

   .lightpalette & {
      --color: #{list.nth(map.get($colors, light), 1)};
      --color-dark: #{list.nth(map.get($colors, light), 2)};
      --color-light: #{list.nth(map.get($colors, light), 3)};
   }
   .darkpalette & {
      --color: #{list.nth(map.get($colors, dark), 1)};
      --color-dark: #{list.nth(map.get($colors, dark), 2)};
      --color-light: #{list.nth(map.get($colors, dark), 3)};
   }

   --base-offset: #{$distance};
   --offset: var(--base-offset);
   --neg-offset: calc(var(--offset) * -1);
   --blur-radius: calc(var(--offset) * 2);
   --inset: ;

   background: var(--color);

   @if $margin {
      margin: calc(var(--base-offset) * 2);
   }

   &.inset {
      --inset: inset;

      @if $hover {
         &:hover {
            --offset: calc(var(--base-offset) * 1.4);
         }
      }
   }
   @if $hover {
      &:hover {
         --offset: calc(var(--base-offset) * 0.4);
         transition: box-shadow 0.1s;
      }
   }

   @if $direction == "topleft" {
      box-shadow:
         var(--offset) var(--offset) var(--blur-radius)
            var(--color-dark) var(--inset),
         var(--neg-offset) var(--neg-offset) var(--blur-radius)
            var(--color-light) var(--inset);
   }
   @else if $direction == "topright" {
      box-shadow:
         var(--neg-offset) var(--offset) var(--blur-radius)
            var(--color-dark) var(--inset),
         var(--offset)  var(--neg-offset) var(--blur-radius)
            var(--color-light) var(--inset);
   }
   @else if $direction == "bottomleft" {
      box-shadow:
         var(--offset) var(--neg-offset) var(--blur-radius) 
            var(--color-dark) var(--inset),
         var(--neg-offset) var(--offset) var(--blur-radius)
            var(--color-light) var(--inset);
   }
   @else if $direction == "bottomright" {
      box-shadow:
         var(--neg-offset) var(--neg-offset) var(--blur-radius)
            var(--color-dark) var(--inset),
         var(--offset) var(--offset) var(--blur-radius)
           var(--color-light) var(--inset);
   }
   @else {
      @error "Invalid direction #{$direction}"
   }
}

