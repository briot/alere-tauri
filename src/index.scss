@use "sass:list";
@use "sass:string";

// Reset browser-specific styles except display.
// https://elad2412.github.io/the-new-css-reset/
@import "the-new-css-reset/css/reset.css";

@import "shared";

/**
 * Define the application color palette. These are all the colors we can use
 * in the application.
 * See https://www.smashingmagazine.com/2020/08/application-color-schemes-css-custom-properties/
 */

.lightpalette, .darkpalette {
   @include generate-color-vars(color, $blue-mantine);
   @include generate-color-vars(invalid, $red-mantine);
   @include generate-color-vars(green, $green-mantine);
   @include generate-color-vars(red, $red-mantine);
   @include generate-color-vars(gray, #adb5bd);

   // Harmonic scales, used for various purposes
   --ratio: 1.5;
   --s-5: calc(var(--s-4) / var(--ratio));
   --s-4: calc(var(--s-3) / var(--ratio));
   --s-3: calc(var(--s-2) / var(--ratio));
   --s-2: calc(var(--s-1) / var(--ratio));
   --s-1: calc(var(--s0) / var(--ratio));
   --s0: 1rem;
   --s1: calc(var(--s0) * var(--ratio));
   --s2: calc(var(--s1) * var(--ratio));
   --s3: calc(var(--s2) * var(--ratio));
   --s4: calc(var(--s3) * var(--ratio));
   --s5: calc(var(--s4) * var(--ratio));

   --font-size-sidebar: 1rem;
   --font-size-tool: 0.8rem;
   --scrollbar-width: 20px;  /* for webkit and chrome */
   --table-vert-border-width: 0px;
   --table-horiz-border-width: 0px;
   --header-tool-height: 2.5rem;
   --row-height: 25px;       /* must match ROW_HEIGHT in javascript */

   --zindex-dropdown:       1000;
   --zindex-sticky:         1020;
   --zindex-fixed:          1030;
   --zindex-modal-backdrop: 1040;
   --zindex-modal:          1050;
   --zindex-popover:        1060;
   --zindex-tooltip:        1070;
}

/**
 * Define semantic colors.
 * At this level, we do not worry about the value of the colors, but about
 * their functions. Each element in the map is a list of colors, one per theme.
 */
$themes: (
   // foreground colors to use on either dark background colors or
   // light background colors. Those are used automatically by the function
   // generate-color-vars
   fg-for-dark-colors:         [ --gray-200,            #f8f9fa ],
   fg-for-light-colors:        #212529,

   // page-bg is also the panel background color when using neumorph mode (in
   // which case panel-bg is unused).
   page-bg:                    [ rgb(29,30,48),         #e0e5ec ],
   page-fg:                    [ --fg-for-dark-colors,  --fg-for-light-colors ],
   panel-border:               [ --gray-800,            --gray-400 ],
   panel-bg:                   [ #1a1a1a,               white ],
   panel-fg:                   [ --fg-for-dark-colors,  --fg-for-light-colors ],
   panel-faded-fg:             [ --gray-800,            --gray-600 ],
   panel-faded-bg:             none,
   panel-title-fg:             [ --color-300,           --color-700 ],
   panel-title-bg:             --panel-bg,
   shadow-color:               [ --gray-100-10p,         --gray-400-50p ],

   tooltip-bg:                 [ --gray-800,       --gray-400 ],
   tooltip-fg:                 [ --gray-fg-800,    --gray-fg-400 ],
   tooltip-border:             [ --gray-700,       --gray-500 ],

   // Colors for tables
   table-alternate-row-bg:     [ --color-300-10,   --color-100-10p ],
   table-border:               [ --gray-700,       --gray-500 ],
   table-expand-arrow-fg:      [ --gray-500,       --gray-700 ],
   table-expand-arrow-bg:      none,
   table-hover-bg:             [ --color-600,      --color-200 ],
   table-hover-fg:             [ --fg-color-600,   --fg-color-200 ],
   table-row-details-fg:       [ --gray-600,       --gray-500 ],
   table-row-details-bg:       --panel-bg,
   table-warn-fg:              --invalid-500,
   table-warn-bg:              --panel-bg,

   // Colors used for the text of positive or negative numbers. Those are
   // displayed on --panel-bg colors.
   positive-fg:                [ --green-300,      --green-700 ],
   negative-fg:                [ --red-400,        --red-700 ],

   // Colors for the Income-Expenses panel. These are used to create gradients
   income-gradient-1:          [ --green-600,      --green-800 ],
   income-gradient-2:          [ --green-100,      --green-300 ],
   expense-gradient-1:         [ --red-600,        --red-800   ],
   expense-gradient-2:         [ --red-100,        --red-300   ],

   // The background grid in graphs
   cartesian-grid:             [ --gray-700,       --gray-400  ],

   // Colors for the various graphs
   graph-price:                [ --gray-100,       --gray-500  ],
   graph-roi:                  [ --green-300,      --green-600 ],
   graph-shares:               [ --gray-300,       --gray-800  ],
   graph-holding:              [ --color-500,      --color-200 ],
   graph-networth:             [ --color-600,      --color-200 ],

   // Colors used in forms
   input-bg:                   [ --gray-900,       #f3f3f3 ],
   input-fg:                   [ --fg-gray-900,    --fg-for-light-colors],

   input-border:               [ --gray-900,       --gray-600 ],
   input-brightness-hover:     [ 115%,             85% ],
   input-error-bg:             [ --invalid-300,    --invalid-100 ],
   input-error-border:         [ --invalid-100,    --invalid-300 ],
   input-error-fg:             [ --fg-invalid-300, --fg-invalid-100 ],
   input-focus-color:          --color-500,
   input-invalid-fg:           --fg-invalid-500,
   input-invalid-bg:           --invalid-500,
   input-primary-bg:           [ --color-400,      --color-200],
   input-primary-border:       --color-600,
   input-primary-fg:           --fg-color-500,

   // Colors for neumorphism on buttons, when selected
   neumorph-selected-fg:       [ --color-400,        --color-700 ],

   // Colors for scrollbars
   scrollbar-fg:               --color-200,
   scrollbar-bg:               --panel-bg,
   scrollbar-border:           none,
);

@mixin themed($index) {
  @each $key, $colors in $themes {
     // Extract the color from the list (if we have a list)
     $raw: if(type-of($colors) == list, list.nth($colors, $index), $colors);

     // If we have the name of a CSS variable, add var()
     $c: if(type-of($raw) == string,
            if(string.slice($raw, 1, 2) == "--", "var(" + $raw + ")", $raw),
            $raw);

     --#{$key}: #{$c};
  }
}

.darkpalette {
   @include themed(1);
}
.lightpalette {
   @include themed(2);
}

body {
   /* margins on the sides of the main page */
   --side-margin: 5px;

   margin:
      env(safe-area-inset-top, 0px)
      env(safe-area-inset-right, 0px)
      env(safe-area-inset-bottom, 0px)
      env(safe-area-inset-left, 0px);
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;

   /* See http://clagnut.com/sandbox/font-size-adjust-ex.html */
   font-family: sans-serif;
   font-size-adjust: 0.521;

   font-size: 14px;
}

/* Scrollbars */

::-webkit-scrollbar { // Safari + Chrome
   width: 10px;   // for vertical scrollbars only
   height: auto;  // for horizontal scrollbars only
}
::-webkit-scrollbar-track {
   background: var(--scrollbar-bg);
}
::-webkit-scrollbar-thumb {
   background-color: var(--scrollbar-fg);
   border-radius: 20px;
   border: 3px solid var(--scrollbar-border);
}
@supports(scrollbar-color: red blue) { // Firefox
   * {
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
      scrollbar-width: auto;  // auto, none, thin
   }

}

/**
 * Rounded corners, but only when the element doesn't use the full width
 * of the viewport (within a given margin).
 * https://ishadeed.com/article/conditional-border-radius/
 */
.rounded-corners-if-small {
   --rcl-margin: 4px;
   --rcl-radius: 8px;
   border-radius: max(0px, min(var(--rcl-radius), calc((100vw - var(--rcl-margin) - 100%) * 9999)));
}

/* settings from
 * https://www.smashingmagazine.com/2020/07/css-techniques-legibility/
 */
h1 {
    font-size: 2.5rem;
    line-height: calc(1ex / 0.42);
    margin: calc(1ex / 0.42 / 2) 0;
}
h2 {
    font-size: 2rem;
    line-height: calc(1ex / 0.42);
    margin: calc(1ex / 0.42 / 2) 0;
}
h3 {
    font-size: 1.75rem;
    line-height: calc(1ex / 0.38);
    margin: calc(1ex / 0.38 / 2) 0;
}
h4 {
    font-size: 1.5rem;
    line-height: calc(1ex / 0.37);
    margin: calc(1ex / 0.37 / 2) 0;
}
h5 {
    font-size: 1rem;
    line-height: calc(1ex / 0.37);
    margin: calc(1ex / 0.37 / 2) 0;
}
p {
    font-size: 1rem;
    line-height: calc(1ex / 0.32);
    margin: calc(1ex / 0.32 / 2) 0;
}
p:lang(fr),
p:lang(en) {
    //  text-align: justify;
    //  hyphens: auto;
}
p:lang(it) { // The browser does NOT correctly support hyphenation
    //  text-align: left;
    //  hyphens: none;
}

a {
   color: inherit;
   text-decoration: none;
   &:hover {
      text-decoration: underline;
   }
}

.morph {
   @include neumorphism();
}

.recharts {
   &-cartesian-axis-tick-value {
      fill: var(--cartesian-grid);
      font-size: 0.8em;
   }
//   &-reference-line,
   &-cartesian-axis,
   &-cartesian-grid {
      line {
         stroke: var(--cartesian-grid);
      }
   }
   &-label-list {
      font-size: 0.6em;
   }
}
